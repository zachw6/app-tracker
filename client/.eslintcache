[{"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/index.js":"1","/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/App.js":"2","/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/Login.js":"3","/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/Dashboard.js":"4","/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/Application.js":"5","/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/AddApplication.js":"6","/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/EditApplication.js":"7"},{"size":200,"mtime":1609336799696,"results":"8","hashOfConfig":"9"},{"size":2162,"mtime":1609425841251,"results":"10","hashOfConfig":"9"},{"size":1157,"mtime":1609337517217,"results":"11","hashOfConfig":"9"},{"size":18852,"mtime":1609513901976,"results":"12","hashOfConfig":"9"},{"size":2339,"mtime":1609425841256,"results":"13","hashOfConfig":"9"},{"size":9609,"mtime":1609473966153,"results":"14","hashOfConfig":"9"},{"size":10667,"mtime":1609473929289,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"xf2330",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/index.js",[],["32","33"],"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/App.js",[],"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/Login.js",[],"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/Dashboard.js",[],"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/Application.js",[],"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/AddApplication.js",[],"/Users/zacharywilliams/Projects/AppTracker/app-tracker/client/src/Component/EditApplication.js",["34"],"import React from 'react';\nimport '../css/dashboard.css';\nimport '../css/addApplicationStyles.css'\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css';\nimport {useState, useEffect} from 'react'\n\nexport default function EditApplication(props) {\n\n    const moment = require('moment');\n\n    const [appliedDate, setAppliedDate] = useState(moment(props.appliedDate).toDate());\n    const [interviewTime, setInterviewTime] = useState(moment(props.interviewTime).toDate());\n    const [documentsSubmitted, setDocumentsSubmitted] = useState([]);\n    const [notes, setNotes] = useState([]);\n\n    useEffect( () => {\n        let documentsSubmittedCopy = [];\n        let notesCopy = [];\n        for(let i = 0; i < props.documentsSubmitted.length; i++)\n            documentsSubmittedCopy.push(props.documentsSubmitted[i]);\n        for(let i = 0; i < props.notes.length; i++)\n            notesCopy.push(props.notes[i]);\n        setDocumentsSubmitted(documentsSubmittedCopy);\n        setNotes(notesCopy);\n        checkInterviewScheduled();\n    }, [])\n\n    const addSubmittedDocument = () => {\n        let documentsSubmittedCopy = [...documentsSubmitted];\n        if(!documentsSubmittedCopy.includes(document.getElementById('submittedDocument').value)){\n            documentsSubmittedCopy.push(document.getElementById('submittedDocument').value);\n            setDocumentsSubmitted(documentsSubmittedCopy);\n        }\n    }\n\n    const addNote = () => {\n        let notesCopy = [...notes];\n        if(!notesCopy.includes(document.getElementById('note').value)){\n            notesCopy.push(document.getElementById('note').value);\n            setNotes(notesCopy);\n        }\n    }\n\n    const checkInterviewScheduled = () => {\n        if(document.getElementById('status').value === \"Interview Scheduled\"){\n            document.getElementsByClassName('interviewSchedule')[0].style.display = \"block\";\n            document.getElementsByClassName('notesDocsContainer')[0].style.height = \"15em\";\n        } else {\n            document.getElementsByClassName('interviewSchedule')[0].style.display = \"none\";\n            document.getElementsByClassName('notesDocsContainer')[0].style.height = \"10.3em\";\n        }\n    }\n\n    const removeNoteElement = (e, note) => {\n        let notesCopy = [...notes];\n        if(notesCopy.includes(note)){\n            let index = notesCopy.findIndex(element => element === note);\n            notesCopy.splice(index, 1);\n            setNotes(notesCopy);\n        } else {\n            console.error(\"There was a problem removing the note.\")\n        }\n    }\n\n    const removeDocumentElement = (e, document) => {\n        let documentsSubmittedCopy = [...documentsSubmitted];\n        if(documentsSubmittedCopy.includes(document)){\n            let index = documentsSubmittedCopy.findIndex(element => element === document);\n            documentsSubmittedCopy.splice(index, 1);\n            setDocumentsSubmitted(documentsSubmittedCopy);\n        } else {\n            console.error(\"There was a problem removing the document.\")\n        }\n    }\n\n    const updateApplication = (event) => {\n        event.preventDefault();\n        axios({\n          method: \"POST\",\n          url: \"http://localhost:5000/user/updateApplication\",\n          data: {token: sessionStorage.getItem('loginToken'), \n          appData: \n            {\n            _id: props.applicationId,\n            companyName: document.getElementById('companyName').value,\n            position: document.getElementById('position').value,\n            appliedDate: appliedDate,\n            status: document.getElementById('status').value,\n            interviewTime: interviewTime,\n            interviewer: document.getElementById('interviewer').value,\n            followUp: document.getElementById('followUp').value,\n            documentsSubmitted: documentsSubmitted,\n            notes: notes\n            }\n        }\n      }).then(res => {\n          if(res.data.access !== \"denied\"){\n            props.updateEditedApplication(props.applicationId, appliedDate, document.getElementById('companyName').value, document.getElementById('position').value, document.getElementById('interviewer').value, document.getElementById('status').value, interviewTime, document.getElementById('followUp').value, documentsSubmitted, notes);\n            props.toggleEditing();\n        }\n          \n      });\n    }\n\n    return (\n        <div className=\"addApplication\">\n            <div className=\"addApplicationContainer\">\n                <div className=\"addApplicationHeader\"><h2>Update Application</h2><button className=\"blueButton\" onClick={props.toggleEditing}>&#10006;</button></div>\n                    <form className=\"addApplicationForm\" onSubmit={updateApplication}>\n                        <div className=\"formContainer\">\n                            {/* Right side of form */ }\n                            <div className=\"leftSideForm\">\n                                <h3 className=\"addApplicationTitle\">Company Name <span style={{color: '#fb2424', fontSize:'0.6em'}}>(REQUIRED)</span></h3><input required type=\"text\" name=\"companyName\" id=\"companyName\" defaultValue={props.companyName}></input><br />\n                                <h3 className=\"addApplicationTitle\">Position <span style={{color: '#fb2424', fontSize:'0.6em'}}>(REQUIRED)</span></h3><input required type=\"text\" name=\"position\" id=\"position\" defaultValue={props.position}></input><br />\n                                <h3 className=\"addApplicationTitle\">Applied <span style={{color: '#fb2424', fontSize:'0.6em'}}>(REQUIRED)</span></h3><div style={{width: '100%'}}><DatePicker required selected={appliedDate} onChange={date => setAppliedDate(date)} /></div>\n                                \n                                <h3 className=\"addApplicationTitle\">Status <span style={{color: '#fb2424', fontSize:'0.6em'}}>(REQUIRED)</span></h3>\n                                    <div className=\"addApplicationSelect\"><select required className=\"addApplicationSelect\" onChange={checkInterviewScheduled} name=\"status\" id=\"status\" defaultValue={props.status}>\n                                        <option value=\"Application Sent\">Application Sent</option>\n                                        <option value=\"In Communication\">In Communication</option>\n                                        <option value=\"Interview Scheduled\">Interview Scheduled</option>\n                                        <option value=\"Pending Response\">Pending Response</option>\n                                        <option value=\"Job Offer\">Job Offered</option>\n                                        <option value=\"Job Accepted\">Job Accepted</option>\n                                        <option value=\"Rejected\">Rejected</option>\n                                    </select></div>\n\n                                <div className=\"interviewSchedule\">\n                                    <h3 className=\"addApplicationTitle\">Interview Date/Time</h3>\n                                    <div style={{width: '100%'}}><DatePicker selected={interviewTime} onChange={date => setInterviewTime(date)} showTimeSelect dateFormat=\"Pp\" timeFormat=\"p\" /></div></div>\n                                <h3 className=\"addApplicationTitle\">Interviewer: </h3><input type=\"text\" name=\"interviewer\" id=\"interviewer\" defaultValue={props.interviewer}></input>\n                                <h3 className=\"addApplicationTitle\">Follow-Up: </h3>\n                                <div className=\"addApplicationSelect\"><select required name=\"followUp\" id=\"followUp\" defaultValue={props.followUp}>\n                                    <option value=\"false\">Incomplete</option>\n                                    <option value=\"true\">Complete</option>\n                                </select></div>\n                                <br />\n                            </div>\n\n                            {/* Left side of form */ }\n                            <div className=\"rightSideForm\">\n                                <h3 className=\"addApplicationTitle\">Documents Submitted: </h3>\n                                <div className=\"addApplicationSelect\"><select required name=\"submittedDocument\" id=\"submittedDocument\">\n                                    <option value=\"Resume\">Resume</option>\n                                    <option value=\"Cover Letter\">Cover Letter</option>\n                                    <option value=\"Transcript\">Transcript</option>\n                                    <option value=\"Portfolio\">Portfolio</option>\n                                    <option value=\"Letters of Recommendation\">Letters of Recommendation</option>\n                                    <option value=\"References List\">References List</option>\n                                    <option value=\"Other\">Other</option>\n                                </select> </div>\n                                <button type=\"button\" className=\"blueButton\" onClick={addSubmittedDocument}>Add Document</button> <br />\n                                \n                                <h3 className=\"addApplicationTitle\">Notes: </h3><textarea type=\"text\" name=\"note\" id=\"note\"></textarea><br />\n                                <button type=\"button\" className=\"blueButton\" onClick= { addNote } >Add Note</button>\n\n                                <div className=\"notesDocsContainer\">\n                                    {documentsSubmitted.length > 0 ? <h4>Submitted Documents</h4> : null }\n                                    { documentsSubmitted.map((doc, index) => {\n                                    return <div key = {\"doc\" + index}><li>{index + 1}) {doc} <button type=\"button\" onClick={(e) => { removeDocumentElement(e, doc) }}>&#10006;</button></li></div>\n                                }) }\n                                    {notes.length > 0 && documentsSubmitted.length > 0 ? <div style={{marginBottom: '10px'}}></div> : null}\n                                    {notes.length > 0 ? <h4>Notes</h4> : null }\n                                    { notes.map((note, index) => {\n                                    return <div key = {\"note\" + index}><li>{index + 1}) {note} <button type=\"button\" onClick={(e) => { removeNoteElement(e, note) }}>&#10006;</button></li></div>\n                                }) }\n                                </div>\n                            </div>\n                            \n                            <br />\n                        </div>\n                        <input type=\"submit\" name=\"Submit\" value=\"Update Application\"/>\n                    </form>\n            </div>\n        </div>\n    )\n}\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":28,"column":8,"nodeType":"41","endLine":28,"endColumn":10,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.documentsSubmitted' and 'props.notes'. Either include them or remove the dependency array.","ArrayExpression",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Update the dependencies array to be: [props.documentsSubmitted, props.notes]",{"range":"48","text":"49"},[1099,1101],"[props.documentsSubmitted, props.notes]"]